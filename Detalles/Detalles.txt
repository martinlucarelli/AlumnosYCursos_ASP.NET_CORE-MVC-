

Conexion a la base de datos con EF
	Para realizar la conexion a la base de datos se hace igual que como hacia con las APIS. Se crea la clase controller y en ella
	los dbset que representan las tablas y luego con ModelCreating se indican las propiedades de cada campo.
	En cuanto a la conexion, es exactamente igual, se crea el connectio string en el AppSettings.JSON y luego desde program.cs se
	indica la conexion.

Problema al devolver los Curos:
	Cuando comence a programar los controllers intente que se retornara directamente los bdset de cursos, pero me daba un error que
	decia que no eran compatibles los datos, esto se debe a que no se puede devolver un dbset sino que se debe devolver una lista.
	Para solucionarlo fue muy sencillo, simplemente utilice .ToList() para cambiar ese dbset a lista.

	    public IActionResult MostrarCursos()
        {               
            return View(context.cursos); ---> Aca daba error porque no puede retornar un dbset a la view.
        }

		public IActionResult MostrarCursos()
        {
            var listaDeCursos = context.cursos.ToList();  ---> Esta es la manera correcta.
            return View(listaDeCursos); 
        }
		
		<<IMPORTANTE>> : El tipo de dato que va a retornar debe coincidir con el tipo @model que va a manejar la vista del metodo
		ej:
		@model Curso --> Si el @model del archivo .cshtml es solamente curso, nos va a dar error ya que no retorna solo un objeto
		sino que una lista de objetos del tipo curso.

		@model List<Curso> --> Esta es la forma correcta, ya que el dato que retorna en el controller coincide con el model que
		maneja la vista.

Editar (pasar id como parametro, conseguir id aunque no este en la pagina)

	Cuando comence a hacer la parte de editar un curso surgio un problema ya que la id no estaba explicitamente en la vista y no sabia
	como traerla para poder hacer la busqueda por id del registro que queria modifcar.
	Para esto lo primero que hice fue pasar el id por el URL al momento de abrir la vista del metodo modificar, es decir, en la vista que
	contiene la lista de cursos, ya que ahi esta la opcion de modificar el curso.
	MostrarCursos.cshtml:

		<a asp-action="ModificarCurso" asp-controller="Curso" asp-route-id="@curso.idCurso" class="btn btn-warning">Editar</a>
		Como esta vista utiliza una lista de Curso (no utiliza el DTO), puedo utilizar asp-route-id"@curso.IdCurso" para enviar el
		id del curso como parametro a la hora de iniciar la accion de ModificarCurso, recordemos que este metodo es solo la vista
		no contiene la logica para actualizar un registro de la base de datos.

	Una vez que ya envie la id por parametro al metodo que devuelve la vista lo que va hacer este metodo es:
		1. Buscar desde el context.Cursos un curso que coincida con la id (la busqueda puede ser con find() o con
		firstOrDefault()), las dos funciones que se utilicen para buscar al objeto que se desea modificar van a devolver ese objeto,
		por lo tanto podemos interactuar con ese objeto.

		2. Si el curso que se busca es encontrado, lo que va hacer es crear un objeto del tipo CursoDTO y ese objeto se va a llenar
		con los datos del objeto que nos devolvio la busqueda.

		3. Creamos un ViewBag(). Los viewbag sirven para pasar datos desde el controlador a la vista de manera dinamica, sin necesidad
		de crear un modelo para ello, ademas solamente se puede tener un modelo por vista, asi que en este caso fue muy util ya que el 
		modelo que utilizamos en la vista es el CursoDto pero nosotros queremos enviar el ID y el id no pertenece al modelo DTO por eso
		utilizamos un ViewBag para pasar ese dato.
		Crear Viewbag():
			ViewBag.CursoId = id; --> CursoID se llamara el Viewbag y lo igualamos al id, id es el dato que recibimos por parametro
			tambien podriamos igualarlo a =curso.idCurso.
		
		4.Por ultimo hacemos un return View(CursoDTO). Con esto conseguimos enviar a la vista el objeto que instanciamos, esto nos
		va a permitir que los campos para completar el registro no esten vacios, sino que contengan los datos del registro que se
		quiere modificar, asi es mas como para el usuario si este solamente quiere modificar el nombre o la descripcion.

		5. Una vez dentro de la vista, debemos indicar que el modelo que utilizaremos es el de CursoDTO, luego podemos copiar el
		mismo formulario que utilizamos para crear un nuevo curso, pero le debemos agregar un nuevo input que sera para el id, este
		input debe ser del tipo hidden.

			<input type="hidden" name="id" value="@ViewBag.CursoId" /> Como se puede ver, en este input enviamos el dato del id con el
			viewbag.

		Luego cada input va a estar completo por defecto con los datos del objeto que enviamos por parametro en el return View()
		de la funcion
		Ej:
			<input asp-for="nombreCurso" type="text" class="form-control">--> Con asp-for conseguimos esto


Mostrar nombre de curso en lugar de id:

	Cuando comence a hacer la vista de los alumnos surgio el problema de que el modelo alumno tiene un campo que es IdCurso que contiene
	el curso al cual pertence, pero lo correcto es mostrar el nombre del curso en lugar del id. El problema es que el modelo que pasamos
	a la vista no contiene el campo nombre de curso.
	Solucion: 
		Para solucionar esto tuve que utilizar LINQ para hacer un join y asi traerme el nombre del curso, lo que pasa es que al
		utilizar LINQ lo que conseguimos es nos devuelva una nueva tabla con la consulta que hicimos. Esta nueva tabla que nos devuelve
		la consulta no es del tipo Alumno ya que el modelo alumno no contiene el campo nombreCurso, por lo tanto esta tabla va a ser
		del tipo anonimo (sin nombre).
		El tipo de dato anonimo debe ser igual al modelo que se utiliza en la vista, para esto en la vista debemos indicar el modelo
		'@model dynamic', este tipo de modelo nos permite trabajar con datos en los que no se conoce su tipo (como el de la consulta
		LINQ)
		
		Consulta Join con LINQ:

            var alumnosConCurso = context.alumnos.Join(context.cursos,
                                    alumno=> alumno.cursoId,
                                    curso=> curso.idCurso,
                                    (alumno,curso) => new
                                    {
                                        alumno.idAlumno,
                                        alumno.nombreAlumno,
                                        alumno.edadAlumno,
                                        cursoNombre=curso.nombreCurso
                                    })
                                    .ToList();
									
			return View(alumnosConCurso);


			1.context.alumnos -> Es la tabla o colección base desde donde partimos (similar al FROM alumnos en SQL).

			2.Metodo Join. Primero le indicamos la tabla que vamos a combinar 'context.cursos', luego tiene 2 claves y un selector.
				1era clave: alumno => alumno.cursoId → Es el campo en la tabla base que conecta con la otra tabla.
				2da clave: curso => curso.idCurso → Es el campo de la tabla relacionada.
				Selector: (alumno, curso) => new { ... } → Indica cómo queremos combinar los resultados.

			3. En la parte (alumno, curso) => new { ... }, definimos qué campos queremos incluir en el resultado y cómo llamarlos, es
			decir que aca indicamos como queremos que sea la tabla que va a devolver. Esta nueva tabla parte de dos objetos 
			(alumnos,curso) por eso podemos utilizar las propiedades de ellos.
			Se debe tener en cuenta que como estamos creando una nueva tabla, tambien estamos creando un nuevo tipo de dato u objeto
			por lo tanto podemos realizar cierta logica en estos campos. Por ejemplo, si en lugar de tener su edad tendriamos la fecha
			de nacimiento, podemos hacer una operacion que reste la fecha actual con la fecha de nacimiento y asi conseguimos que su edad
			se mantenga actualizada.

			4. Utilizamos .ToList() para convertir el resultado en una lista.

			5. Devolvemos la vista con la lista que nos devolvio la consulta

		Objeto dynamic:
			
			Este objeto nos permite declarar variables cuyo tipo exacto no se conoce en tiempo de compilación. Es útil para trabajar
			con objetos donde el esquema puede cambiar o no es fijo.

			Caracteristicas:
				
				-No tiene validación en tiempo de compilación: Esto significa que no podés detectar errores relacionados con propiedades
				o métodos hasta que se ejecute el programa.

				-Ideal para resultados anónimos: Cuando usás new { ... } en LINQ, estás creando un objeto anónimo (sin nombre). 
				dynamic te permite trabajar con esos objetos en la vista o en otras partes del código.

				-Flexibilidad total: Podés agregar cualquier propiedad, pero conlleva el riesgo de errores en tiempo de ejecución.

				Ejemplo de error en tiempo de ejecucion

					dynamic obj = new { Nombre = "Martín", Edad = 20 };
					Console.WriteLine(obj.Nombre); // Funciona
					Console.WriteLine(obj.Altura); // Error en tiempo de ejecución
				
				En este caso declaramos un objeto que tiene las propiedades nombre y edad, pero pedimos que escriba por consola la
				altura, altura no es una propiedad del objeto, pero sin embargo, esto no se va a marcar como error, pero el error lo va 
				a tirar en tiempo de ejecucion.

		
		Objeto dynamic en la vista:

			@model dynamic --> Indicamos el modelo del tipo dynamic.

			<table class="table table-hover">
				<thead>
					<tr>
						<th>#</th>
						<th>Alumno</th>
						<th>Edad</th>
						<th>Curso</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Model) --> Como enviamos por paramtero en el return View() la lista que nos devolvio la
					{								consulta LINQ, aca podemos iterar sobre ella y mostrar cada registro con el nombre	
													del curso en lugar que el id.
						<tr>						
							<td>@item.idAlumno</td>
							<td>@item.nombreAlumno</td>
							<td>@item.edadAlumno</td>
							<td>@item.cursoNombre</td>
						</tr>
					



DTO y ViewModel:
	
	Mientras realizaba la vista para agregar a un nuevo alumno, surgio un porblema ya que yo necesitaba que aparezca un menu desplegable
	con los distintos cursos que le puedo asignar al alumno. El problema era el modelo que iba a recibir esa vista, ya que Alumno.cs
	contenia un idCurso pero no contenia el nombre de los cursos. Para esto debia crear un modelo especial que ademas de contener
	los datos del alumno, tambien tenga la lista con los cursos. Lo primero que se ocurrio crear fue un DTO y no estaba equivocado,
	pero el termino DTO se utiliza para enviar datos entre capas, por ejemplo la capa service y la capa controller, mientras que si
	queremos enviar datos entre vistas y controllers utilizamos el termino ViewModel.
	El dto como el viewmodel funcionan de igual manera, en ambos se crea una clase con los datos que deseamos manejar. Simplemete lo 
	especifico por que es una buena practica llamarlo como ViewModel y no como DTO. De hecho el CursoDTO deberia ser un ViewModel.

	Ejemplo ViewModel:
		public class AlumnoViewModel
		{

			[Required(ErrorMessage = "Campo obligatorio")]
			public string? nombreAlumno { get; set; }
			[Required(ErrorMessage = "Campo obligatorio")]
			public int edadAlumno { get; set; }
			public int cursoId { get; set; }

			[NotMapped]
			public List<Curso>? cursos { get; set; } --> Lista de cursos
		}

	Implementacion

		public IActionResult AgregarAlumno()
        {

           var viewModel= new AlumnoViewModel();

            viewModel.cursos=context.cursos.ToList();

            return View(viewModel);
        }

		En el metodo que solamente devuelve la vista lo hice fue crear un objeto del tipo AlumnoViewModel y luego a partir del context
		guarde la lista de cursos (la que esta en la base de datos) en la lista de cursos (la que esta en el viewModel).
		Luego mande el viewModel a la vista.

		[HttpPost]
        public IActionResult AgregarAlumno(AlumnoViewModel alumno)
        {
            alumno.cursos = null; ---> Cuando el usuario completa el formulario nunca llena la lista de cursos, por eso tira un error
										para evitar el error se completa la lista null.
            if(!ModelState.IsValid) 
            {
                var errores = ModelState.Values.SelectMany(v => v.Errors) //Capturar los errores del modelstate
                               .Select(e => e.ErrorMessage);

                foreach (var error in errores)
                {
                    logger.LogError(error);
                }

                return BadRequest();
            }

            var newAlumno = new Alumno
            {
                nombreAlumno = alumno.nombreAlumno,
                edadAlumno = alumno.edadAlumno,
                cursoId = alumno.cursoId,
                
                
            };

            context.alumnos.Add(newAlumno);
            context.SaveChanges();
            return RedirectToAction("AlumnoAgregadoConExito");
        }

		En el metodo que realiza la logica en lo unico que aparece el viewmodel es que es el tipo de dato pasado por parametro, este dato
		lo recibe de la vista que es la que contiene el formulario.

	Por lo tanto el ViewModel sirvio para poder colocar la lista de cursos y que el usuario elija el curso desde el menu desplegable y
	tambien para que cuando el usuario complete el formulario, los datos sean enviado a traves del viewModel.



					